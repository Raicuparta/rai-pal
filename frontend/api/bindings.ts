
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async addGame(path: string) : Promise<null> {
    return await TAURI_INVOKE("add_game", { path });
},
async configureMod(gameId: GameId, modId: string) : Promise<null> {
    return await TAURI_INVOKE("configure_mod", { gameId, modId });
},
async deleteMod(modId: string) : Promise<null> {
    return await TAURI_INVOKE("delete_mod", { modId });
},
async downloadMod(modId: string) : Promise<null> {
    return await TAURI_INVOKE("download_mod", { modId });
},
async frontendReady() : Promise<null> {
    return await TAURI_INVOKE("frontend_ready");
},
async getAppSettings() : Promise<AppSettings> {
    return await TAURI_INVOKE("get_app_settings");
},
async getGameIds(query: GamesQuery | null) : Promise<GameIdsResponse> {
    return await TAURI_INVOKE("get_game_ids", { query });
},
async getGame(gameId: GameId) : Promise<DbGame> {
    return await TAURI_INVOKE("get_game", { gameId });
},
async getInstalledModVersions(gameId: GameId) : Promise<Partial<{ [key in string]: string }>> {
    return await TAURI_INVOKE("get_installed_mod_versions", { gameId });
},
async getLocalMods() : Promise<Partial<{ [key in string]: LocalMod }>> {
    return await TAURI_INVOKE("get_local_mods");
},
async getRemoteMods() : Promise<Partial<{ [key in string]: RemoteMod }>> {
    return await TAURI_INVOKE("get_remote_mods");
},
async installMod(gameId: GameId, modId: string) : Promise<null> {
    return await TAURI_INVOKE("install_mod", { gameId, modId });
},
async openGameFolder(gameId: GameId) : Promise<null> {
    return await TAURI_INVOKE("open_game_folder", { gameId });
},
async openGameModsFolder(gameId: GameId) : Promise<null> {
    return await TAURI_INVOKE("open_game_mods_folder", { gameId });
},
async openInstalledModFolder(gameId: GameId, modId: string) : Promise<null> {
    return await TAURI_INVOKE("open_installed_mod_folder", { gameId, modId });
},
async openLogsFolder() : Promise<null> {
    return await TAURI_INVOKE("open_logs_folder");
},
async openModFolder(modId: string) : Promise<null> {
    return await TAURI_INVOKE("open_mod_folder", { modId });
},
async openModLoaderFolder(modLoaderId: string) : Promise<null> {
    return await TAURI_INVOKE("open_mod_loader_folder", { modLoaderId });
},
async openModsFolder() : Promise<null> {
    return await TAURI_INVOKE("open_mods_folder");
},
async refreshGame(gameId: GameId) : Promise<null> {
    return await TAURI_INVOKE("refresh_game", { gameId });
},
async refreshGames(providerId: ProviderId) : Promise<null> {
    return await TAURI_INVOKE("refresh_games", { providerId });
},
async refreshMods() : Promise<null> {
    return await TAURI_INVOKE("refresh_mods");
},
async refreshRemoteGames() : Promise<null> {
    return await TAURI_INVOKE("refresh_remote_games");
},
async removeGame(path: string) : Promise<null> {
    return await TAURI_INVOKE("remove_game", { path });
},
async resetSteamCache() : Promise<null> {
    return await TAURI_INVOKE("reset_steam_cache");
},
async runProviderCommand(providerCommand: ProviderCommand) : Promise<null> {
    return await TAURI_INVOKE("run_provider_command", { providerCommand });
},
async runRunnableWithoutGame(modId: string) : Promise<null> {
    return await TAURI_INVOKE("run_runnable_without_game", { modId });
},
async saveAppSettings(settings: AppSettings) : Promise<null> {
    return await TAURI_INVOKE("save_app_settings", { settings });
},
async uninstallAllMods(gameId: GameId) : Promise<null> {
    return await TAURI_INVOKE("uninstall_all_mods", { gameId });
},
async uninstallMod(gameId: GameId, modId: string) : Promise<null> {
    return await TAURI_INVOKE("uninstall_mod", { gameId, modId });
}
}

/** user-defined events **/


export const events = __makeEvents__<{
errorRaised: ErrorRaised,
executedProviderCommand: ExecutedProviderCommand,
gamesChanged: GamesChanged,
refreshGame: RefreshGame,
selectInstalledGame: SelectInstalledGame,
syncLocalMods: SyncLocalMods,
syncModLoaders: SyncModLoaders,
syncRemoteMods: SyncRemoteMods
}>({
errorRaised: "error-raised",
executedProviderCommand: "executed-provider-command",
gamesChanged: "games-changed",
refreshGame: "refresh-game",
selectInstalledGame: "select-installed-game",
syncLocalMods: "sync-local-mods",
syncModLoaders: "sync-mod-loaders",
syncRemoteMods: "sync-remote-mods"
})

/** user-defined constants **/

export const PROVIDER_IDS = ["Ea","Epic","Gog","Itch","Manual","Steam","Ubisoft","Xbox"] as const;

/** user-defined types **/

export type AppLocale = "EnUs" | "EsEs" | "FrFr" | "DeDe" | "PtPt" | "ZhCn" | "JaJp" | "KoKr" | "WaWa"
export type AppSettings = { hideGameThumbnails: boolean; overrideLanguage: AppLocale | null; gamesQuery: GamesQuery | null; selectedTab: TabId; skipConfirmDialogs: string[]; ownedSubscriptions: GameSubscription[] }
export type Architecture = "X64" | "X86"
export type CommonModData = { id: string; engine: EngineBrand | null; unityBackend: UnityBackend | null; engineVersionRange: EngineVersionRange | null; loaderId: string }
export type DbGame = { providerId: ProviderId; gameId: string; externalId: string; displayTitle: string; titleDiscriminator: string | null; thumbnailUrl: string | null; releaseDate: bigint | null; exePath: PathData | null; engineBrand: EngineBrand | null; engineVersionMajor: number | null; engineVersionMinor: number | null; engineVersionPatch: number | null; engineVersionDisplay: string | null; unityBackend: UnityBackend | null; architecture: Architecture | null; tags: JsonData<GameTag[]>; providerCommands: JsonData<Partial<{ [key in ProviderCommandAction]: ProviderCommand }>> }
export type EngineBrand = "Unity" | "Unreal" | "Godot" | "GameMaker"
export type EngineVersionNumbers = { major: number; minor: number | null; patch: number | null }
export type EngineVersionRange = { minimum: EngineVersionNumbers | null; maximum: EngineVersionNumbers | null }
export type Error = "Tauri" | "Core" | "Io" | "Rusql" | "SerdeJson" | { FailedToGetResourcesPath: string } | { FailedToAccessStateData: string }
export type ErrorRaised = string
export type ExecutedProviderCommand = null
export type GameId = { providerId: ProviderId; gameId: string }
export type GameIdsResponse = { gameIds: GameId[]; totalCount: bigint }
export type GameSubscription = "UbisoftClassics" | "UbisoftPremium" | "XboxGamePass" | "EaPlay"
export type GameTag = "VR" | "Demo"
export type GamesChanged = []
export type GamesFilter = { providers: (ProviderId | null)[]; tags: (GameTag | null)[]; architectures: (Architecture | null)[]; unityBackends: (UnityBackend | null)[]; engines: (EngineBrand | null)[]; installed: (InstallState | null)[] }
export type GamesQuery = { filter: GamesFilter; search: string; sortBy: GamesSortBy; sortDescending: boolean }
export type GamesSortBy = "Title" | "Engine" | "ReleaseDate"
export type InstallState = "Installed" | "NotInstalled"
export type JsonData<T> = T
export type LocalMod = { data: LocalModData; common: CommonModData }
export type LocalModData = { path: string; manifest: Manifest | null }
export type Manifest = { title: string | null; version: string; runnable: RunnableModData | null; engine: EngineBrand | null; engineVersionRange: EngineVersionRange | null; unityBackend: UnityBackend | null }
export type ModDownload = { id: string; url: string; root: string | null; runnable: RunnableModData | null }
export type ModKind = "Installable" | "Runnable"
export type ModLoaderData = { id: string; path: string; kind: ModKind }
export type PathData = string
export type ProviderCommand = { String: string } | { Path: [string, string[]] }
export type ProviderCommandAction = "Install" | "ShowInLibrary" | "ShowInStore" | "StartViaProvider" | "StartViaExe" | "OpenInBrowser"
export type ProviderId = "Ea" | "Epic" | "Gog" | "Itch" | "Manual" | "Steam" | "Ubisoft" | "Xbox"
export type RefreshGame = GameId
export type RemoteMod = { common: CommonModData; data: RemoteModData }
export type RemoteModData = { title: string; deprecated: boolean; author: string; sourceCode: string; description: string; latestVersion: ModDownload | null }
export type RunnableModData = { path: string; args: string[] }
export type SelectInstalledGame = [ProviderId, string]
export type SyncLocalMods = Partial<{ [key in string]: LocalMod }>
export type SyncModLoaders = Partial<{ [key in string]: ModLoaderData }>
export type SyncRemoteMods = Partial<{ [key in string]: RemoteMod }>
export type TabId = "Games" | "Mods" | "Thanks"
export type UnityBackend = "Il2Cpp" | "Mono"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
