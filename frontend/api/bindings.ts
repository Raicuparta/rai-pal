         // This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

         export const commands = {
async getGameMap(ignoreCache: boolean) : Promise<__Result__<{ [key in string]: { id: string; name: string; discriminator: string | null; fullPath: string; architecture: Architecture | null; scriptingBackend: UnityScriptingBackend | null; operatingSystem: OperatingSystem | null; steamLaunch: SteamLaunchOption | null; installedMods: string[]; engine: GameEngine | null; thumbnailUrl: string | null } }, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:tauri-specta|get_game_map", { ignoreCache }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getOwnedGames(ignoreCache: boolean) : Promise<__Result__<{ id: string; name: string; installed: boolean; osList: OperatingSystem[]; engine: GameEngineBrand; releaseDate: number; thumbnailUrl: string }[], string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:tauri-specta|get_owned_games", { ignoreCache }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async openGameFolder(gameId: string) : Promise<__Result__<null, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:tauri-specta|open_game_folder", { gameId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getModLoaders(ignoreCache: boolean) : Promise<__Result__<{ [key in string]: { id: string; path: string; mods: Mod[] } }, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:tauri-specta|get_mod_loaders", { ignoreCache }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async installMod(modLoaderId: string, modId: string, gameId: string) : Promise<__Result__<null, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:tauri-specta|install_mod", { modLoaderId, modId, gameId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async uninstallMod(gameId: string, modId: string) : Promise<__Result__<null, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:tauri-specta|uninstall_mod", { gameId, modId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async openGameModsFolder(gameId: string) : Promise<__Result__<null, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:tauri-specta|open_game_mods_folder", { gameId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async startGame(gameId: string) : Promise<__Result__<null, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:tauri-specta|start_game", { gameId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async openModFolder(modLoaderId: string, modId: string) : Promise<__Result__<null, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:tauri-specta|open_mod_folder", { modLoaderId, modId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async updateGameInfo(gameId: string) : Promise<__Result__<{ [key in string]: { id: string; name: string; discriminator: string | null; fullPath: string; architecture: Architecture | null; scriptingBackend: UnityScriptingBackend | null; operatingSystem: OperatingSystem | null; steamLaunch: SteamLaunchOption | null; installedMods: string[]; engine: GameEngine | null; thumbnailUrl: string | null } }, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:tauri-specta|update_game_info", { gameId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteSteamAppinfoCache() : Promise<__Result__<null, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:tauri-specta|delete_steam_appinfo_cache") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getDiscoverGames(ignoreCache: boolean) : Promise<__Result__<{ id: string; engine: GameEngineBrand; nsfw: boolean }[], string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:tauri-specta|get_discover_games", { ignoreCache }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async openModsFolder() : Promise<__Result__<null, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("plugin:tauri-specta|open_mods_folder") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}



/** user-defined types **/

export type Architecture = "X64" | "X86"
export type GameEngine = { brand: GameEngineBrand; version: GameEngineVersion | null }
export type GameEngineBrand = "Unity" | "Unreal" | "Godot"
export type GameEngineVersion = { major: number; minor: number; patch: number; suffix: string | null; display: string }
export type Mod = { id: string; name: string; scriptingBackend: UnityScriptingBackend | null; engine: GameEngineBrand | null; kind: ModKind; path: string }
export type ModKind = "Installable" | "Runnable"
export type OperatingSystem = "Linux" | "Windows"
export type SteamLaunchOption = { launchId: string; appId: number; description: string | null; executable: string | null; arguments: string | null; appType: string | null; osList: string | null; betaKey: string | null; osArch: string | null }
export type UnityScriptingBackend = "Il2Cpp" | "Mono"

/** tauri-specta globals **/

         import { invoke as TAURI_INVOKE } from "@tauri-apps/api";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindowHandle as __WebviewWindowHandle__ } from "@tauri-apps/api/window";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: T extends null
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

type __Result__<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindowHandle__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindowHandle__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    }
  );
}

     